name: Deploy to AWS Lightsail

on:
  push:
    branches:
      - main

jobs:
  deploy:
    environment: prod
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Load .mautic_env variables
      run: |
        set -a
        source .mautic_env
        set +a
        echo "MAUTIC_PORT=${MAUTIC_PORT}" >> $GITHUB_ENV

    - name: Check EMAIL_ADDRESS environment variable
      run: |
        if [ -z "${EMAIL_ADDRESS}" ]; then
          echo "Error: Missing required environment variable: EMAIL_ADDRESS"
          exit 1
        fi
      env:
        EMAIL_ADDRESS: ${{ vars.EMAIL_ADDRESS }}

    - name: Check DOMAIN environment variable
      run: |
        if [ -z "${DOMAIN}" ]; then
          echo "Error: Missing required environment variable: DOMAIN"
          exit 1
        fi
      env:
        DOMAIN: ${{ vars.DOMAIN }}

    - name: Check required secrets
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        MAUTIC_PASSWORD: ${{ secrets.MAUTIC_PASSWORD }}
        LIGHTSAIL_SSH_KEY: ${{ secrets.LIGHTSAIL_SSH_KEY }}
      run: |
        error_missing_secrets=()
        check_secret() {
          if [ -z "${!1}" ]; then
            error_missing_secrets+=("$1")
          fi
        }

        check_secret "AWS_ACCESS_KEY_ID"
        check_secret "AWS_SECRET_ACCESS_KEY"
        check_secret "MAUTIC_PASSWORD"
        check_secret "LIGHTSAIL_SSH_KEY"

        if [ ${#error_missing_secrets[@]} -ne 0 ]; then
          echo "Error: Missing required secrets: ${error_missing_secrets[*]}"
          exit 1
        fi

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

    - name: Install AWS CLI
      uses: unfor19/install-aws-cli-action@v1
      with:
        version: 2
        verbose: false

    - name: Setup SSH access
      run: |
        # Create SSH directory and save the PEM key
        mkdir -p ~/.ssh
        echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" > ~/.ssh/lightsail.pem
        chmod 400 ~/.ssh/lightsail.pem
        
        # Debug: Verify the key file exists and has correct permissions
        ls -la ~/.ssh/lightsail.pem

    - name: Create Lightsail instance if it doesn't exist
      run: |
        # List available blueprints for verification
        echo "Available Docker blueprints:"
        INSTANCE_EXISTS=$(aws lightsail get-instance --instance-name zauru-mautic 2>/dev/null || echo "false")
        if [ "$INSTANCE_EXISTS" = "false" ]; then
          
          echo "Creating new Lightsail instance..."
          aws lightsail create-instances \
            --instance-names zauru-mautic \
            --availability-zone us-east-1a \
            --blueprint-id ubuntu_24_04 \
            --bundle-id small_2_0 \
            --key-pair-name zauru \
            --user-data file://setup-vps.sh
          
          echo "Waiting for instance to be ready..."
          while : ; do
            STATUS=$(aws lightsail get-instance --instance-name zauru-mautic --query 'instance.state.name' --output text)
            echo "Instance status: $STATUS"
            if [ "$STATUS" = "running" ]; then
              echo "Instance is now running"
              
              # Download default SSH key
              echo "Downloading default SSH key..."
              echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" > lightsail.pem
              chmod 600 lightsail.pem
              
              break
            fi
            sleep 10
          done
        else
          echo "Instance 'zauru-mautic' already exists."
        fi

    - name: Handle Static IP
      run: |
        # Check if static IP exists
        STATIC_IP_EXISTS=$(aws lightsail get-static-ip --static-ip-name zauru-mautic-static || echo "false")
        
        if [ "$STATIC_IP_EXISTS" = "false" ]; then
          echo "Creating new static IP in Lightsail..."
          aws lightsail allocate-static-ip --static-ip-name zauru-mautic-static
          
          echo "Attaching static IP to instance..."
          aws lightsail attach-static-ip \
            --static-ip-name zauru-mautic-static \
            --instance-name zauru-mautic
        else
          # Check if static IP is attached to our instance
          ATTACHED_TO=$(aws lightsail get-static-ip --static-ip-name zauru-mautic-static --query 'staticIp.attachedTo' --output text)
          
          if [ "$ATTACHED_TO" != "zauru-mautic" ]; then
            echo "Static IP exists but not attached to our instance. Attaching now..."
            aws lightsail attach-static-ip \
              --static-ip-name zauru-mautic-static \
              --instance-name zauru-mautic
          else
            echo "Static IP already attached to instance zauru-mautic"
          fi
        fi

    - name: Get Instance IP
      run: |
        echo "Getting static IP address..."
        IP=$(aws lightsail get-static-ip --static-ip-name zauru-mautic-static --query 'staticIp.ipAddress' --output text)
        echo "Static IP: $IP"
        echo "ip=$IP" >> $GITHUB_ENV

    - name: Wait for SSH to be available
      run: |
        echo "Waiting for SSH to be available..."
        echo "Attempting to connect to ${{ env.ip }}"
        for i in {1..6}; do
          if ssh -o StrictHostKeyChecking=no \
             -o UserKnownHostsFile=/dev/null \
             -o ConnectTimeout=10 \
             -i ~/.ssh/lightsail.pem ubuntu@${{ env.ip }} 'echo "SSH test"'; then
            echo "SSH connection successful"
            break
          fi
          echo "Attempt $i failed, waiting 10 seconds..."
          sleep 10
        done

    - name: Wait for server to be accessible
      run: |
        echo "Waiting for server at ${{ env.ip }} to be accessible..."
        while : ; do
          if nc -z ${{ env.ip }} 22; then
            echo "Server is up and accessible."
            break
          else
            echo "."
            sleep 2
          fi
        done

    - name: Prepare virtual server configuration
      if: ${{ vars.DOMAIN }}
      run: |
        DOMAIN_IP=$(dig +short ${{ vars.DOMAIN }})
        if [ "$DOMAIN_IP" == "${{ env.ip }}" ]; then
          echo "Domain ${{ vars.DOMAIN }} correctly points to the droplet IP."
          # Rename the nginx-virtual-host-template file
          mv nginx-virtual-host-template "nginx-virtual-host-${{ vars.DOMAIN }}"
          # Replace DOMAIN_NAME inside the file with the actual domain
          sed -i "s/DOMAIN_NAME/${{ vars.DOMAIN }}/g" "nginx-virtual-host-${{ vars.DOMAIN }}"
          sed -i "s/PORT/${{ env.MAUTIC_PORT }}/g" "nginx-virtual-host-${{ vars.DOMAIN }}"
          cat nginx-virtual-host-${{ vars.DOMAIN }} # debug
        else
          echo "Error: Domain ${{ vars.DOMAIN }} does not point to the droplet IP."
          echo "To configure your DNS settings, access your domain registrar's DNS management page. Locate the DNS settings or DNS management section. You should create or update an A record with the following details: Name: @ (or your subdomain, e.g., www if your domain is www.example.com), Type: A, Value: ${{ env.ip }}. This change will point ${{ vars.DOMAIN }} to the IP address ${{ env.ip }}. Note that DNS changes can take up to 48 hours to propagate globally."
          exit 1
        fi

    - name: Prepare setup-dc.sh script
      run: |
        # Replace placeholders in setup-dc.sh
        sed -i "s/{{IP_ADDRESS}}/${{ env.ip }}/g" setup-dc.sh
        sed -i "s/{{PORT}}/${{ env.MAUTIC_PORT }}/g" setup-dc.sh
        sed -i "s/{{EMAIL_ADDRESS}}/${{ env.EMAIL_ADDRESS }}/g" setup-dc.sh
        sed -i "s/{{MAUTIC_PASSWORD}}/${{ secrets.MAUTIC_PASSWORD }}/g" setup-dc.sh
        if [ ! -z "${{ env.DOMAIN }}" ]; then
          sed -i "s/{{DOMAIN_NAME}}/${{ env.DOMAIN }}/g" setup-dc.sh
        fi
        cat setup-dc.sh # debug
      env:
        EMAIL_ADDRESS: ${{ vars.EMAIL_ADDRESS }}
        DOMAIN: ${{ vars.DOMAIN }}

    - name: Deploy to Server
      run: |
        # Check and create SSH directory if needed
        if [ ! -d ~/.ssh ]; then
          echo "Creating ~/.ssh directory..."
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
        else
          echo "~/.ssh directory already exists"
        fi
        
        # Check if key file already exists
        if [ -f ~/.ssh/lightsail.pem ]; then
          echo "Removing existing lightsail.pem..."
          rm -f ~/.ssh/lightsail.pem
        fi
        
        # Save the key file
        echo "Creating new lightsail.pem..."
        echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" > ~/.ssh/lightsail.pem
        chmod 600 ~/.ssh/lightsail.pem
        
        # Verify key file
        if [ ! -f ~/.ssh/lightsail.pem ]; then
          echo "Error: Failed to create lightsail.pem"
          exit 1
        fi
        
        # Debug: Show permissions
        ls -la ~/.ssh/lightsail.pem
        
        # Create remote directory and set permissions
        ssh -o StrictHostKeyChecking=no \
            -i ~/.ssh/lightsail.pem \
            ubuntu@${{ env.ip }} '
              sudo mkdir -p /var/www && \
              sudo mkdir -p /var/log && \
              sudo chown -R ubuntu:ubuntu /var/www && \
              sudo chown -R ubuntu:ubuntu /var/log
            '
        
        # Sync files
        rsync -av --progress \
          -e "ssh -i ~/.ssh/lightsail.pem -o StrictHostKeyChecking=no" \
          --exclude '.git' \
          ./ ubuntu@${{ env.ip }}:/var/www/
        
        # Set permissions for everything
        ssh -o StrictHostKeyChecking=no \
            -i ~/.ssh/lightsail.pem \
            ubuntu@${{ env.ip }} '
              echo "Setting permissions..." && \
              sudo chmod -R 770 /var/www/setup-dc.sh && \
              echo "Permissions set successfully"
            '
        
        # Run post-deploy script with proper permissions for logging
        ssh -o StrictHostKeyChecking=no \
            -i ~/.ssh/lightsail.pem \
            ubuntu@${{ env.ip }} '
              echo "exec setup-dc.sh and log to /var/log/setup-dc.log" && \
              sudo bash -c "/var/www/setup-dc.sh > /var/log/setup-dc.log 2>&1" && \
              echo "Permissions and logs set successfully"
            '
        
        
    - name: Open your Mautic instance
      run: |
        if [ -z "${DOMAIN}" ]; then
          echo "You can visit the Mautic installation at http://${{ env.ip }}:${{ env.MAUTIC_PORT }}"
        else
          echo "You can visit the Mautic installation at http://${DOMAIN}"
        fi
      env:
        DOMAIN: ${{ vars.DOMAIN }}

    - name: Download setup-dc.log from Server
      run: |
        # Create .ssh directory with correct permissions
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Save and set permissions for the key
        echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" > ~/.ssh/lightsail.pem
        chmod 600 ~/.ssh/lightsail.pem
        
        # Debug permissions
        ls -la ~/.ssh/
        
        # Download the file
        scp -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ~/.ssh/lightsail.pem \
            ubuntu@${{ env.ip }}:/var/log/setup-dc.log ./setup-dc.log
        
        # Clean up
        rm -f ~/.ssh/lightsail.pem

    - name: Upload setup-dc.log as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: setup-dc-log
        path: ./setup-dc.log

    - name: Check and configure HTTPS port
      run: |
        # Get current firewall rules
        RULES=$(aws lightsail get-instance-port-states --instance-name zauru-mautic)
        
        # Check if port 443 is already open
        if ! echo "$RULES" | grep -q '"fromPort": 443'; then
          echo "Opening port 443 for HTTPS..."
          aws lightsail open-instance-public-ports \
            --instance-name zauru-mautic \
            --port-info fromPort=443,toPort=443,protocol=TCP
          echo "Port 443 opened successfully"
        else
          echo "Port 443 is already open"
        fi

        # Verify the rule was added
        aws lightsail get-instance-port-states --instance-name zauru-mautic

    - name: Debug SSH Connection
      run: |
        # Check if key exists and show permissions
        echo "Checking SSH key..."
        ls -la ~/.ssh/
        
        # Show public key derived from private key
        echo "Generated public key from private key:"
        ssh-keygen -y -f ~/.ssh/lightsail.pem || echo "Failed to read private key"
        
        # Get instance metadata to verify key
        echo "Instance SSH key fingerprint from AWS:"
        aws lightsail get-instance --instance-name zauru-mautic \
          --query 'instance.sshKeyName' --output text
        
        # Try connection with maximum verbosity
        echo "Attempting SSH connection with full debug..."
        ssh -vvv -i ~/.ssh/lightsail.pem ubuntu@${{ env.ip }} 'echo "test"'

    - name: Wait and Retry SSH Connection
      run: |
        echo "Waiting 30 seconds for instance to fully initialize..."
        sleep 30
        
        # Try SSH connection again
        ssh -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o ConnectTimeout=10 \
            -i ~/.ssh/lightsail.pem ubuntu@${{ env.ip }} 'echo "SSH test"'
