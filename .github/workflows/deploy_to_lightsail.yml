name: Deploy to AWS Lightsail

on:
  push:
    branches:
      - main

jobs:
  deploy:
    environment: prod
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Load .mautic_env variables
      run: |
        set -a
        source .mautic_env
        set +a
        echo "MAUTIC_PORT=${MAUTIC_PORT}" >> $GITHUB_ENV

    - name: Check EMAIL_ADDRESS environment variable
      run: |
        if [ -z "${EMAIL_ADDRESS}" ]; then
          echo "Error: Missing required environment variable: EMAIL_ADDRESS"
          exit 1
        fi
      env:
        EMAIL_ADDRESS: ${{ vars.EMAIL_ADDRESS }}

    - name: Check DOMAIN environment variable
      run: |
        if [ -z "${DOMAIN}" ]; then
          echo "Error: Missing required environment variable: DOMAIN"
          exit 1
        fi
      env:
        DOMAIN: ${{ vars.DOMAIN }}

    - name: Check required secrets
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        MAUTIC_PASSWORD: ${{ secrets.MAUTIC_PASSWORD }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        error_missing_secrets=()
        check_secret() {
          if [ -z "${!1}" ]; then
            error_missing_secrets+=("$1")
          fi
        }

        check_secret "AWS_ACCESS_KEY_ID"
        check_secret "AWS_SECRET_ACCESS_KEY"
        check_secret "MAUTIC_PASSWORD"
        check_secret "SSH_PRIVATE_KEY"

        if [ ${#error_missing_secrets[@]} -ne 0 ]; then
          echo "Error: Missing required secrets: ${error_missing_secrets[*]}"
          exit 1
        fi

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

    - name: Install AWS CLI
      uses: unfor19/install-aws-cli-action@v1
      with:
        version: 2
        verbose: false

    - name: Create Lightsail key pair
      run: |
        # Check if key pair exists
        if aws lightsail get-key-pair --key-pair-name zauru-mautic-key >/dev/null 2>&1; then
          echo "Deleting existing key pair..."
          aws lightsail delete-key-pair --key-pair-name zauru-mautic-key
        else
          echo "No existing key pair found, creating new one..."
        fi
        
        # Create new key pair and save private key directly
        echo "Creating new key pair..."
        mkdir -p ~/.ssh
        aws lightsail create-key-pair \
          --key-pair-name zauru-mautic-key \
          --query 'privateKey' \
          --output text > ~/.ssh/id_rsa
        
        # Set correct permissions
        chmod 600 ~/.ssh/id_rsa
        
        # Debug: Verify key pair creation
        echo "Verifying key pair creation..."
        aws lightsail get-key-pair --key-pair-name zauru-mautic-key
        
        # Debug: Check key format (showing first line only)
        echo "Checking key format:"
        head -n 1 ~/.ssh/id_rsa

    - name: Create Lightsail instance if it doesn't exist
      run: |
        INSTANCE_EXISTS=$(aws lightsail get-instance --instance-name zauru-mautic 2>/dev/null || echo "false")
        if [ "$INSTANCE_EXISTS" = "false" ]; then
          echo "Creating new Lightsail instance..."
          aws lightsail create-instances \
            --instance-names zauru-mautic \
            --availability-zone us-east-1a \
            --blueprint-id ubuntu_20_04 \
            --bundle-id small_2_0 \
            --key-pair-name zauru-mautic-key \
            --user-data ./setup-vps.sh
          
          echo "Waiting for instance to be ready..."
          while : ; do
            STATUS=$(aws lightsail get-instance --instance-name zauru-mautic --query 'instance.state.name' --output text)
            echo "Instance status: $STATUS"
            if [ "$STATUS" = "running" ]; then
              echo "Instance is now running"
              break
            fi
            sleep 10
          done
        else
          echo "Instance 'zauru-mautic' already exists."
        fi

    - name: Handle Static IP
      run: |
        # Check if static IP exists
        STATIC_IP_EXISTS=$(aws lightsail get-static-ip --static-ip-name zauru-mautic-static-ip 2>/dev/null || echo "false")
        
        if [ "$STATIC_IP_EXISTS" = "false" ]; then
          echo "Creating new static IP..."
          aws lightsail allocate-static-ip --static-ip-name zauru-mautic-static-ip
          
          echo "Attaching static IP to instance..."
          aws lightsail attach-static-ip \
            --static-ip-name zauru-mautic-static-ip \
            --instance-name zauru-mautic
        else
          # Check if static IP is attached to our instance
          ATTACHED_INSTANCE=$(aws lightsail get-static-ip --static-ip-name zauru-mautic-static-ip --query 'staticIp.attachedTo' --output text)
          
          if [ "$ATTACHED_INSTANCE" != "zauru-mautic" ]; then
            echo "Static IP exists but not attached to our instance. Attaching now..."
            aws lightsail attach-static-ip \
              --static-ip-name zauru-mautic-static-ip \
              --instance-name zauru-mautic
          else
            echo "Static IP already attached to instance zauru-mautic"
          fi
        fi

    - name: Get Static IP
      run: |
        IP=$(aws lightsail get-static-ip --static-ip-name zauru-mautic-static-ip --query 'staticIp.ipAddress' --output text)
        echo "Static IP: $IP"
        echo "ip=$IP" >> $GITHUB_ENV

    - name: Wait for server to be accessible
      run: |
        echo "Waiting for server at ${{ env.ip }} to be accessible..."
        while : ; do
          if nc -z ${{ env.ip }} 22; then
            echo "Server is up and accessible."
            break
          else
            echo "."
            sleep 2
          fi
        done

    - name: Prepare virtual server configuration
      if: ${{ vars.DOMAIN }}
      run: |
        DOMAIN_IP=$(dig +short ${{ vars.DOMAIN }})
        if [ "$DOMAIN_IP" == "${{ env.ip }}" ]; then
          echo "Domain ${{ vars.DOMAIN }} correctly points to the droplet IP."
          # Rename the nginx-virtual-host-template file
          mv nginx-virtual-host-template "nginx-virtual-host-${{ vars.DOMAIN }}"
          # Replace DOMAIN_NAME inside the file with the actual domain
          sed -i "s/DOMAIN_NAME/${{ vars.DOMAIN }}/g" "nginx-virtual-host-${{ vars.DOMAIN }}"
          sed -i "s/PORT/${{ env.MAUTIC_PORT }}/g" "nginx-virtual-host-${{ vars.DOMAIN }}"
          cat nginx-virtual-host-${{ vars.DOMAIN }} # debug
        else
          echo "Error: Domain ${{ vars.DOMAIN }} does not point to the droplet IP."
          echo "To configure your DNS settings, access your domain registrar's DNS management page. Locate the DNS settings or DNS management section. You should create or update an A record with the following details: Name: @ (or your subdomain, e.g., www if your domain is www.example.com), Type: A, Value: ${{ env.ip }}. This change will point ${{ vars.DOMAIN }} to the IP address ${{ env.ip }}. Note that DNS changes can take up to 48 hours to propagate globally."
          exit 1
        fi

    - name: Prepare setup-dc.sh script
      run: |
        # Replace placeholders in setup-dc.sh
        sed -i "s/{{IP_ADDRESS}}/${{ env.ip }}/g" setup-dc.sh
        sed -i "s/{{PORT}}/${{ env.MAUTIC_PORT }}/g" setup-dc.sh
        sed -i "s/{{EMAIL_ADDRESS}}/${{ env.EMAIL_ADDRESS }}/g" setup-dc.sh
        sed -i "s/{{MAUTIC_PASSWORD}}/${{ secrets.MAUTIC_PASSWORD }}/g" setup-dc.sh
        if [ ! -z "${{ env.DOMAIN }}" ]; then
          sed -i "s/{{DOMAIN_NAME}}/${{ env.DOMAIN }}/g" setup-dc.sh
        fi
        cat setup-dc.sh # debug
      env:
        EMAIL_ADDRESS: ${{ vars.EMAIL_ADDRESS }}
        DOMAIN: ${{ vars.DOMAIN }}

    - name: Deploy to Server
      uses: easingthemes/ssh-deploy@main
      with:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        ARGS: "-rlgoDzvc"
        SOURCE: "."
        REMOTE_HOST: ${{ env.ip }}
        REMOTE_USER: root
        TARGET: /var/www
        EXCLUDE: ".git"
        SCRIPT_BEFORE: mkdir -p /var/www
        SCRIPT_AFTER: /var/www/setup-dc.sh > /var/log/setup-dc.log 2>&1

    - name: Open your Mautic instance
      run: |
        if [ -z "${DOMAIN}" ]; then
          echo "You can visit the Mautic installation at http://${{ env.ip }}:${{ env.MAUTIC_PORT }}"
        else
          echo "You can visit the Mautic installation at http://${DOMAIN}"
        fi
      env:
        DOMAIN: ${{ vars.DOMAIN }}

    - name: Download setup-dc.log from Server
      run: |
        # The ~/.ssh/id_rsa file should already exist from the key pair creation step
        echo "Using key from Lightsail key pair..."
        ls -l ~/.ssh/id_rsa || echo "Key file not found!"
        
        # Add the host key to known_hosts
        ssh-keyscan -H ${{ env.ip }} >> ~/.ssh/known_hosts
        
        # Try to connect with verbose output for debugging
        echo "Testing SSH connection..."
        ssh -v -i ~/.ssh/id_rsa ubuntu@${{ env.ip }} 'echo "SSH connection successful"'
        
        # Download the file
        echo "Downloading setup-dc.log..."
        scp -i ~/.ssh/id_rsa ubuntu@${{ env.ip }}:/var/log/setup-dc.log ./setup-dc.log
      shell: bash

    - name: Upload setup-dc.log as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: setup-dc-log
        path: ./setup-dc.log

    - name: Check and configure HTTPS port
      run: |
        # Get current firewall rules
        RULES=$(aws lightsail get-instance-port-states --instance-name zauru-mautic)
        
        # Check if port 443 is already open
        if ! echo "$RULES" | grep -q '"fromPort": 443'; then
          echo "Opening port 443 for HTTPS..."
          aws lightsail open-instance-public-ports \
            --instance-name zauru-mautic \
            --port-info fromPort=443,toPort=443,protocol=TCP
          echo "Port 443 opened successfully"
        else
          echo "Port 443 is already open"
        fi

        # Verify the rule was added
        aws lightsail get-instance-port-states --instance-name zauru-mautic
