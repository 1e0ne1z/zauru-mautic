name: Deploy to DigitalOcean

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Create VPS if it doesn't exist
      run: |
        if ! doctl compute droplet list | grep -q 'mautic-vps'; then
          doctl compute droplet create mautic-vps --image docker-20-04 --size s-1vcpu-1gb --region nyc1 --ssh-keys ${{ secrets.DIGITALOCEAN_SSH_FINGERPRINT }} --wait --user-data-file setup.sh --enable-monitoring
          echo "droplet_created=true" >> $GITHUB_ENV
        else
          echo "Droplet 'mautic-vps' already exists."
          echo "droplet_created=true" >> $GITHUB_ENV
        fi

    - name: Get VPS IP
      run: |
        echo "Waiting for droplet to be ready..."
        while : ; do
          echo "."
          sleep 2
          STATUS=$(doctl compute droplet get mautic-vps --format Status --no-header)
          if [ "$STATUS" = "active" ]; then
            IP=$(doctl compute droplet get mautic-vps --format PublicIPv4 --no-header)
            if [ -n "$IP" ]; then
              echo "Droplet is active. IP address: $IP"
              break
            fi
          fi
        done
        echo "ip=$IP" >> $GITHUB_ENV

    - name: Wait for server to be accessible
      run: |
        echo "Waiting for server at ${{ env.ip }} to be accessible..."
        while : ; do
          if nc -z ${{ env.ip }} 22; then
            echo "Server is up and accessible."
            break
          else
            echo "."
            sleep 2
          fi
        done

    - name: Deploy to Server
      uses: easingthemes/ssh-deploy@main
      with:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        ARGS: "-rlgoDzvc"
        SOURCE: "."
        REMOTE_HOST: ${{ env.ip }}
        REMOTE_USER: root
        TARGET: /var/www
        EXCLUDE: ".git"
        SCRIPT_BEFORE: |
          mkdir -p /var/www
        SCRIPT_AFTER: |
          echo $RSYNC_STDOUT
          cd /var/www
          pwd
          ls -la
          docker compose up -d
          docker stop basic-mautic_worker-1 # avoiding https://github.com/mautic/docker-mautic/issues/270
          docker exec -u www-data -w /var/www/html basic-mautic_web-1 php ./bin/console mautic:install --force --admin_email willchange@mautic.org --admin_password MauticR0cks! http://157.230.80.20:8001
          docker start basic-mautic_worker-1
